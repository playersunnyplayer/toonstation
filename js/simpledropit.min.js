/**
 * SimpleDropit.js - v0.1.1
 * Drag-n-drop files, Simple for modern browsers
 * https://nishantk02.github.io/SimpleDropit
 * https://www.jqueryscript.net/form/drag-drop-upload-zone.html#google_vignette
 *
 * Made by Nishant K
 * Under MIT License
 */

!function (e, t) { "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).SimpleDropit = t() }(this, (function () { "use strict"; function e() { return (e = Object.assign || function (e) { for (var t = 1; t < arguments.length; t++) { var s = arguments[t]; for (var l in s) Object.prototype.hasOwnProperty.call(s, l) && (e[l] = s[l]) } return e }).apply(this, arguments) } function t(e, s) { return (t = Object.setPrototypeOf || function (e, t) { return e.__proto__ = t, e })(e, s) } function s(e) { if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return e } function l(e) { return e && e.ownerDocument ? e.ownerDocument : document } function a(e, t) { return e ? e.classList.contains(t) : null } var i = function (i) { var r, n; function o(t, l) { var r; (r = i.call(this) || this).isAdvancedUpload = function () { var e = document.createElement("div"); return ("draggable" in e || "ondragstart" in e && "ondrop" in e) && "FormData" in window && "FileReader" in window }, r.onChange = function (e) { o.isFiles(e.target) && (o.showFiles(r.filenameEl, e.target.files), r.boxEl.classList.add("is-dropped")) }, r.dragIn = function (e) { o.isFiles(e.dataTransfer) && (a(r.boxEl, "is-dragover") || r.boxEl.classList.add("is-dragover")) }, r.dragOut = function (e) { o.isFiles(e.dataTransfer) && a(r.boxEl, "is-dragover") && r.boxEl.classList.remove("is-dragover") }, r.drop = function (e) { o.isFiles(e.dataTransfer) && (r.droppedFiles = e.dataTransfer.files, o.showFiles(r.filenameEl, r.droppedFiles), r.boxEl.classList.add("is-dropped")) }, r.preventEventPropagation = function (e) { e.preventDefault(), e.stopPropagation() }; try { if ("string" == typeof t) throw new Error("Invalid Element Object"); if ("object" != typeof t || null === t) throw new Error("Element Object does not exists"); r.el = t } catch (e) { return console.error(e.name + ": " + e.message), s(r) } return r.options = e({}, o.defaultOptions, l), r.classNames = e({}, o.defaultOptions.classNames, r.options.classNames), o.instances.has(r.el) ? s(r) : (r.init(), r) } n = i, (r = o).prototype = Object.create(n.prototype), r.prototype.constructor = r, t(r, n); var d = o.prototype; return d.init = function () { o.instances.set(this.el, this), this.initDom(), this.initListeners() }, d.initDom = function () { if (null !== this.el.closest("." + this.classNames.boxEl)) this.boxEl = this.el.closest("." + this.classNames.boxEl), this.boxWrapperEl = this.boxEl.querySelector("." + this.classNames.boxWrapperEl), this.labelWrapperEl = this.boxEl.querySelector("." + this.classNames.labelWrapperEl), this.supportedLabelEl = this.boxEl.querySelector("." + this.classNames.supportedLabelEl), this.filenameEl = this.boxEl.querySelector("." + this.classNames.filenameEl), this.browseLabelEl = this.boxEl.querySelector("." + this.classNames.browseLabelEl); else { var e = this.el.cloneNode(!0); this.boxEl = document.createElement("div"), this.boxWrapperEl = document.createElement("div"), this.labelWrapperEl = document.createElement("div"), this.supportedLabelEl = document.createElement("span"), this.filenameEl = document.createElement("span"), this.browseLabelEl = document.createElement("label"), this.boxEl.classList.add(this.classNames.boxEl), this.boxWrapperEl.classList.add(this.classNames.boxWrapperEl), this.labelWrapperEl.classList.add(this.classNames.labelWrapperEl), this.supportedLabelEl.classList.add(this.classNames.supportedLabelEl), this.filenameEl.classList.add(this.classNames.filenameEl), this.browseLabelEl.classList.add(this.classNames.browseLabelEl), this.el.classList.add("sd-file-input", "sd-file-input-hide"), this.supportedLabelEl.innerHTML = this.options.supportedLabel + "&nbsp;", this.labelWrapperEl.appendChild(this.supportedLabelEl), this.labelWrapperEl.appendChild(this.filenameEl), this.browseLabelEl.innerHTML = 'Browse <span class="sd-box-browse-file">File</span></span>', this.labelWrapperEl.appendChild(this.browseLabelEl), this.labelWrapperEl.appendChild(e), this.boxWrapperEl.appendChild(this.labelWrapperEl), this.boxEl.appendChild(this.boxWrapperEl), this.el.after(this.boxEl), this.el.remove(), this.el = e } this.isAdvancedUpload && this.boxEl.classList.add("sd-advanced-upload") }, d.initListeners = function () { var e = this;["drag", "dragstart", "dragend", "dragover", "dragenter", "dragleave", "drop"].forEach((function (t) { l(e.boxEl).addEventListener(t, e.preventEventPropagation, !1), e.boxEl.addEventListener(t, e.preventEventPropagation, !1) })), ["dragenter", "dragover"].forEach((function (t) { l(e.boxEl).addEventListener(t, e.dragIn, !0) })), ["dragleave", "drop"].forEach((function (t) { l(e.boxEl).addEventListener(t, e.dragOut, !0) })), this.boxEl.addEventListener("drop", this.drop, !0), this.el.addEventListener("change", this.onChange, !0), this.browseLabelEl.addEventListener("click", (function (t) { !function (e) { if (e.click) e.click(); else if (document.createEvent) { var t = document.createEvent("MouseEvents"); t.initEvent("click", !0, !0), e.dispatchEvent(t) } }(e.el) })) }, o.showFiles = function (e, t) { var s = t[0].name; return "" !== s && void 0 !== s && (e.innerText = t.length > 1 ? t.length + " files selected / " : s + " / ", !0) }, o }(function () { function e() { } return e.isFiles = function (e) { var t = !1; if (void 0 === e.types && e.files) for (var s = 0, l = Object.entries(e.files); s < l.length; s++) { var a = l[s]; a[0], "" !== a[1].name && (t = !0) } else e.types.forEach((function (e, s) { "Files" !== e && "application/x-moz-file" !== e || (t = !0) })); return t }, e }()); return i.instances = new WeakMap, i.defaultOptions = { classNames: { boxEl: "sd-box", boxWrapperEl: "sd-box-wrapper", browseLabelEl: "sd-label", filenameEl: "sd-box-file-name", labelWrapperEl: "sd-label-wrapper", supportedLabelEl: "sd-box-dragndrop" }, supportedLabel: "Drop file here /" }, i }));
